import { Wallet, HDNodeWallet } from "ethers";
import * as Name from "w3name";
export declare function exportPublicKey(key: Uint8Array | CryptoKey): Promise<string>;
export declare function exportPrivateKey(key: CryptoKey): Promise<string>;
export declare function importPrivateKey(input: string): Promise<CryptoKey>;
export declare function importPublicKey(input: string): Promise<CryptoKey>;
export declare const getNameFromSeed: (seed: Uint8Array) => Promise<Name.WritableName>;
export declare const getNameAsBytes: (w3name: Name.Name) => Uint8Array;
export declare const parseNameFromBytes: (nameBytes: Uint8Array) => string;
export declare const bytesToName: (nameBytes: Uint8Array) => Name.Name;
export declare const loadName: (w3name: Name.WritableName | Name.Name) => Promise<Name.Revision | null>;
export declare const readValueAt: (w3name: Name.Name) => Promise<"" | Uint8Array | undefined>;
export declare const readValueAtAddress: (address: string) => Promise<"" | Uint8Array | undefined>;
export declare const readSeedValue: (seed: Uint8Array) => Promise<"" | Uint8Array | undefined>;
export declare const timeout: (n: number) => Promise<unknown>;
export declare const exchangeKeys: (exportedPublicKey: Uint8Array | CryptoKey, privateKey: CryptoKey) => Promise<CryptoKey>;
export declare const importEncryptionKey: (input: Uint8Array) => Promise<CryptoKey>;
export declare const deriveBits: (exportedPublicKey: Uint8Array | CryptoKey, privateKey: CryptoKey) => Promise<Uint8Array>;
export declare const exchangeKeysAndDecrypt: (exportedPublicKey: Uint8Array | CryptoKey, iv: Uint8Array, privateKey: CryptoKey, cipherText: Uint8Array) => Promise<Uint8Array>;
export declare const encrypt: (encryptionKey: CryptoKey, iv: Uint8Array, encodedData: Uint8Array) => Promise<Uint8Array>;
export declare const decrypt: (encryptionKey: CryptoKey, iv: Uint8Array, cipherText: Uint8Array) => Promise<Uint8Array>;
export declare const exchangeKeysAndEncrypt: (exportedPublicKey: Uint8Array | CryptoKey, iv: Uint8Array, privateKey: CryptoKey, encodedData: Uint8Array) => Promise<Uint8Array>;
export declare const resolveSlot: (slot: Uint8Array | Name.WritableName) => Promise<Name.WritableName>;
export declare const publishAt: (message: Uint8Array, revision: Name.WritableName, insert?: boolean) => void;
export declare const writeAt: (message: Uint8Array, _slot: Uint8Array | Name.WritableName, increment?: boolean) => Promise<void>;
export declare const _writeAt: (message: Uint8Array, slot: Name.WritableName, increment?: boolean) => Promise<void>;
export declare const concatBytes: (input: Uint8Array[]) => Uint8Array;
export declare const writeWith: (wallet: Wallet | HDNodeWallet, publicKey: CryptoKey) => (message: Uint8Array, slot: Name.WritableName, increment?: boolean) => Promise<void>;
export declare const getSlotAt: (currentSlot: string | Uint8Array, i: number) => Uint8Array;
export declare const findSlot: (slotRoot: Uint8Array, left?: number, right?: number) => Promise<[Name.WritableName, Uint8Array, number]>;
export declare const generateKeyPair: () => Promise<CryptoKeyPair>;
export declare const getTimestamp: () => number;
export declare const isEmpty: (data: Uint8Array | string) => boolean;
